# -*- coding: utf-8 -*-
"""lstm_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FnvmoEvyiwYirzkE4eB58KwW9piQf7Yu
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pandas import DataFrame

wind=pd.read_csv('WindSpeed.csv', encoding='euc-kr')

#wind.info()
wind['average_speed'].plot()

#367*0.8=293.6
train=wind.loc[:293, ['average_speed']]
test=wind.loc[293:, ['average_speed']]

ax=train.plot()
test.plot(ax=ax)
plt.legend(['train', 'test'])

from sklearn.preprocessing import MinMaxScaler

sc=MinMaxScaler()

train_sc=sc.fit_transform(train)
test_sc=sc.transform(test)

#train_sc

train_sc_df=pd.DataFrame(train_sc, columns=['average_speed'], index=train.index)
test_sc_df=pd.DataFrame(test_sc, columns=['average_speed'], index=test.index)
train_sc_df.head()

for s in range(1, 5):
  train_sc_df['shift_{}'.format(s)]=train_sc_df['average_speed'].shift(s)
  test_sc_df['shift_{}'.format(s)]=test_sc_df['average_speed'].shift(s)

train_sc_df.head(5)

X_train=train_sc_df.dropna().drop('average_speed', axis=1)
y_train=train_sc_df.dropna()[['average_speed']]

X_test=test_sc_df.dropna().drop('average_speed', axis=1)
y_test=test_sc_df.dropna()[['average_speed']]

#X_test.head()

print(type(X_train))
print(type(X_test))

print(X_test.shape)
print(y_test.shape)

X_train_t=X_train.values.reshape(X_train.shape[0], 4, 1)
X_test_t=X_test.values.reshape(X_test.shape[0],4,1)
'''
print(X_train_t.shape)
print(X_train_t)
print(y_train)'''

from keras.layers import LSTM
from keras.models import Sequential
from keras.layers import Dense
import keras.backend as K
from keras.callbacks import EarlyStopping

K.clear_session()

model=Sequential()
model.add(LSTM(20, input_shape=(4,1))) # (timestep, feature)
model.add(Dense(1)) # output=1
model.compile(loss='mean_squared_error', optimizer='adam')
model.summary()

early_stop = EarlyStopping(monitor='loss', patience=1, verbose=1)

model.fit(X_train_t, y_train, epochs=100, batch_size=30, verbose=1, callbacks=[early_stop])

train_sc_df.describe()

import matplotlib.pyplot as plt

y_pred=model.predict(X_test_t, batch_size=30)
plt.scatter(y_test, y_pred)